import os
import uuid
from dotenv import load_dotenv

from aiogram import Router
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from utils.keyboards import keyboard_builder
from utils.auth_methods import get_token, store_session, get_user_ids, get_roles, delete_token
from utils.backend_methods import get_law_update, get_stock_aware
from handlers.states import BotStates

load_dotenv("./tg_conf.env")
AUTH_URL = os.getenv('AUTH_URL')

base_router = Router()


@base_router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    if get_token(message.from_user.id):
        user_roles = get_roles(message.from_user.id)
        if user_roles and "tg_admin" in user_roles:
            await state.set_state(BotStates.admin_choosing_action)
            admin_greet = await message.answer(
                "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –±–æ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø–æ–∫—É–ø–æ–∫!</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ "
                "–æ–¥–Ω–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ –¥–µ–π—Å—Ç–≤–∏–π.", parse_mode="html",
                reply_markup=keyboard_builder(["–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–∫–ª–∞–¥—Å–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏", "–ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–æ—Ä–æ—Ç—ã –ø–æ —Å—á–µ—Ç—É"]))
            await state.update_data(admin_greet=admin_greet)
        else:
            await state.set_state(BotStates.choosing_action)
            start_no_auth = await message.answer(
                "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø–æ–∫—É–ø–æ–∫!</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ "
                "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ –¥–µ–π—Å—Ç–≤–∏–π –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ–º.", parse_mode="html",
                reply_markup=keyboard_builder(["–£–∑–Ω–∞—Ç—å —Å–∫–ª–∞–¥—Å–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏", "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑",
                                               "–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã"]))
            await state.update_data(no_auth_greet=start_no_auth)
    else:
        auth_state = str(uuid.uuid4())
        store_session(message.from_user.id, auth_state)
        await state.set_state(BotStates.checking_auth)
        start_message = await message.answer(
            f"<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø–æ–∫—É–ø–æ–∫!</b>\n\n<a href='{AUTH_URL + auth_state}'>"
            "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤ –±–æ—Ç–µ.</a>\n<b>–ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ "
            "–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.</b>", parse_mode="html", reply_markup=keyboard_builder(["–Ø –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è ‚úÖ"]))
        await state.update_data(start_greet=start_message)


@base_router.message(Command('logout'))
async def logout(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if get_token(user_id):
        delete_token(user_id)
        await state.set_state(BotStates.authing_again)
        start_message = await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏!",
                                             reply_markup=keyboard_builder(["–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æüîÑ"]))
    else:
        auth_state = str(uuid.uuid4())
        await state.set_state(BotStates.checking_auth)
        store_session(message.from_user.id, auth_state)
        start_message = await message.answer(
            f"–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã ‚ùå\n<a href='{AUTH_URL + auth_state}'>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, "
            "–¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤ –±–æ—Ç–µ.</a>\n<b>–ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.</b>",
            parse_mode="html", reply_markup=keyboard_builder(["–Ø –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è ‚úÖ"]))
    await state.update_data(start_greet=start_message)


async def send_news(bot_instance):
    id_list = get_user_ids()
    news_articles = get_law_update()
    if news_articles:
        for user_id in id_list:
            try:
                await bot_instance.send_message(user_id, news_articles)
            except Exception as e:
                print(e)


async def remain_aware(bot_instance):
    id_list = get_user_ids()
    for user_id in id_list:
        awares_list = get_stock_aware(user_id)
        if awares_list:
            for aware in awares_list:
                try:
                    await bot_instance.send_message(user_id, aware)
                except Exception as e:
                    print(e)

